# Generated by Django 4.2.2 on 2023-06-12 01:13

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('book_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('author', models.CharField(max_length=50)),
                ('summary', models.TextField(blank=True, default='', max_length=1000)),
                ('accepted', models.BooleanField(default=False)),
                ('complete', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('meeting_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('meeting_number', models.SmallIntegerField(default=1)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('book_section', models.CharField(max_length=50)),
                ('notes', models.TextField(max_length=1000)),
                ('transcription', models.TextField(blank=True, default='')),
                ('transcription_url', models.URLField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=30)),
                ('password', models.CharField(max_length=30)),
                ('discord_nick', models.CharField(max_length=30)),
                ('role', models.CharField(choices=[('user', 'user'), ('admin', 'admin')], default='user', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, default='<Untitled>', max_length=100)),
                ('content', models.CharField(max_length=10000)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubsite.user')),
                ('book', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clubsite.book')),
                ('meeting', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clubsite.meeting')),
            ],
        ),
        migrations.AddField(
            model_name='meeting',
            name='attendees',
            field=models.ManyToManyField(blank=True, default=list, to='clubsite.user'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='book',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='clubsite.book'),
        ),
        migrations.AddField(
            model_name='book',
            name='proposer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposer', to='clubsite.user'),
        ),
        migrations.AddField(
            model_name='book',
            name='readers',
            field=models.ManyToManyField(default=list, related_name='readers', to='clubsite.user'),
        ),
        migrations.AddField(
            model_name='book',
            name='tags',
            field=models.ManyToManyField(to='clubsite.tag'),
        ),
    ]
